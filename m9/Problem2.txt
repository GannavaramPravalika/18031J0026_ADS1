Bottom to top Appoarch for the word "easyquestion"
size=12
 
 E A S Y Q U E S T I O N

 E A| S Y| Q U| E S| T I| O N
 
 A E| S Y| Q U| E S| I T| N O

 A E S Y| Q U E S| I T N O
 
 A E S Y| E Q S U| I N O T
 
 A E S Y E Q S U| I N O T
  
 A E E Q S S U Y| I N O T
 
 A E E Q S S U Y I N O T
 
 A E E I N O Q S S T U Y=12


for size N=39(top down)
												39
						
					20							||							19
		10 			||			10								10			||			9

5		||		5	|||	5		||		5				5		||		5			5	||	4

2	3			2	3	2	3			2	3			2	3			2	3		2	3	2	2

1  1    2  1			1  1    2  1    1  1    2  1                    1  1    2  1			1  1	2  1    	        1  1    2  1            1  1    2  1    1  1    1  1

1  1    1 1 1                   1  1    1 1 1   1  1    1 1 1                   1  1    1 1 1                   1  1    1 1 1                   1  1    1 1 1           1  1    1 1 1   1  1    1  1

(bottom to top)

1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 =39
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1
 2  2 , 2  2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 1
   4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  2  ,  1
      8     ,     8     ,     8     ,     8     ,     6     ,  1
            16          ,           16          ,          7
                        32                      ,          7
                                        39


Activity8

write the missing statements in the below code:

public static void merge(Comparable[] a, int lo, int mid, int hi) { 

int i = lo, 

j = mid+1; 

for (int k = lo; k <= hi; k++) 

aux[k] = a[k]; 

for (int k = lo; k <= hi; k++) 

if (i > -----------)                                         //Blank 1

a[k] = aux[--------];                      //Blank 2

else if (--------- > hi )                                //Blank 3

a[k] = aux[----------];                   //Blank 4

else if (less(aux[--------], aux[--------]))   //Blank 5    //Blank 6

a[k] = aux[j++]; 

else 

a[k] = aux[i++];

 }

Blanks
1-j
2-j
3-i
4-i
5-lo
6-hi
 											


